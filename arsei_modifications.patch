diff --git a/fftools/ffplay.c b/fftools/ffplay.c
index efcd4f6452..cf5603ce71 100644
--- a/fftools/ffplay.c
+++ b/fftools/ffplay.c
@@ -45,6 +45,7 @@
 #include "libswscale/swscale.h"
 #include "libavutil/opt.h"
 #include "libavutil/tx.h"
+#include "libavutil/detection_bbox.h"
 #include "libswresample/swresample.h"
 
 #include "libavfilter/avfilter.h"
@@ -60,6 +61,8 @@
 
 const char program_name[] = "ffplay";
 const int program_birth_year = 2003;
+/* Draw Annotated regions SEI as bounding boxes*/
+#define ANNOTATED_REGIONS_SEI_SUPPORT 1
 
 #define MAX_QUEUE_SIZE (15 * 1024 * 1024)
 #define MIN_FRAMES 25
@@ -1870,6 +1873,12 @@ static int configure_video_filters(AVFilterGraph *graph, VideoState *is, const c
     int nb_pix_fmts = 0;
     int i, j;
     AVBufferSrcParameters *par = av_buffersrc_parameters_alloc();
+#if ANNOTATED_REGIONS_SEI_SUPPORT
+    const AVDetectionBBoxHeader *header = NULL;
+    const AVDetectionBBox *bbox;
+    int num_bboxes;
+    AVFrameSideData *sd;
+#endif
 
     if (!par)
         return AVERROR(ENOMEM);
@@ -1975,7 +1984,30 @@ static int configure_video_filters(AVFilterGraph *graph, VideoState *is, const c
             INSERT_FILT("rotate", rotate_buf);
         }
     }
+#if ANNOTATED_REGIONS_SEI_SUPPORT
+    sd = av_frame_get_side_data(frame, AV_FRAME_DATA_DETECTION_BBOXES);
+    if (sd) {
+        header = (AVDetectionBBoxHeader *)sd->data;
+        num_bboxes = header->nb_bboxes;
+        for (int i = 0; i < num_bboxes; i++) {
+            if (header) {
+                bbox = av_get_detection_bbox(header, i);
+                char bbox_buf[64];
+                if ((i%2) == 0)
+                    snprintf(bbox_buf, sizeof(bbox_buf), "%d:%d:%d:%d:green", bbox->x, bbox->y, bbox->w, bbox->h);
+                else
+                    snprintf(bbox_buf, sizeof(bbox_buf), "%d:%d:%d:%d:red", bbox->x, bbox->y, bbox->w, bbox->h);                        
+                INSERT_FILT("drawbox", bbox_buf);
+                if (bbox->classify_labels[0] != NULL) {
+                    char bbox_head[256];                        
+                    snprintf(bbox_head, sizeof(bbox_head), "text=%s:x=%d:y=%d", bbox->classify_labels[0], bbox->x+2, bbox->y+2);
+                    INSERT_FILT("drawtext", bbox_head);
+                }
+            }
+        }     
+    }
 
+#endif
     if ((ret = configure_filtergraph(graph, vfilters, filt_src, last_filter)) < 0)
         goto fail;
 
diff --git a/libavcodec/h2645_sei.c b/libavcodec/h2645_sei.c
index 7c83747cd0..345ab70e66 100644
--- a/libavcodec/h2645_sei.c
+++ b/libavcodec/h2645_sei.c
@@ -368,6 +368,123 @@ static int decode_ambient_viewing_environment(H2645SEIAmbientViewingEnvironment
     return 0;
 }
 
+#if ANNOTATED_REGIONS_SEI
+static void initialize_annotated_regions(H2645SEIAnnotatedRegions *h)
+{
+    int index;
+    h->present = 0;
+    h->num_labels = 0;
+    for (index = 0; index < ANNOTATED_REGIONS_MAX_NUM_OBJS; index++)
+    {
+        h->object[index].object_idx = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+        h->object[index].object_valid = 0;
+        h->label[index].label_idx = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+        h->label[index].label_valid = 0;
+    }
+
+}
+static int decode_annotated_regions(H2645SEIAnnotatedRegions *h,
+                                              GetBitContext *gb)
+{
+    int index;
+    char data;
+    int count,label_idx,object_idx,bb_update_flag;
+
+    h->annotated_reg_cancel_flag = get_bits1(gb);
+    h->present = !h->annotated_reg_cancel_flag;
+    if (h->present) {
+        h->not_optimized_for_viewing_flag = get_bits1(gb);
+        h->true_motion_flag = get_bits1(gb);
+        h->occluded_obj_flag = get_bits1(gb);
+        h->partial_obj_flag_present_flag = get_bits1(gb);
+        h->obj_label_present_flag = get_bits1(gb);
+        h->obj_conf_info_present_flag = get_bits1(gb);
+        if (h->obj_conf_info_present_flag)
+            h->obj_conf_length = get_bits(gb, 4) + 1;
+        if (h->obj_label_present_flag) {
+            h->obj_label_lang_present_flag = get_bits1(gb);
+            if (h->obj_label_lang_present_flag) {
+                //byte alignment 
+                while ((get_bits_count(gb) % 8) != 0)
+                    skip_bits1(gb);
+                index = 0;
+                do {
+                    data = get_bits(gb, 8);
+                    h->obj_label_lang[index++] = (char)data;
+                } while (data != '\0');
+            }
+            h->num_label_updates = get_ue_golomb_long(gb);
+            for (count = 0; count < h->num_label_updates; count++)
+            {
+                label_idx = get_ue_golomb_long(gb);
+                h->label[label_idx].label_idx = label_idx;
+                h->label[label_idx].label_valid = !get_bits1(gb);
+                //New label
+                if (h->label[label_idx].label_valid) {
+                    //byte alignment 
+                    while ((get_bits_count(gb) % 8) != 0)
+                        skip_bits1(gb);
+                    index = 0;
+                    do {
+                        data = get_bits(gb, 8);
+                        h->label[label_idx].label[index++] = data;
+                    } while (data != '\0');
+                }
+                //Existing label needs to be erased
+                else {
+                    h->label[label_idx].label_idx = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                    h->label[label_idx].label_valid = 0;
+                }
+            }
+        }
+        h->num_object_updates = get_ue_golomb_long(gb);
+        for (count = 0; count < h->num_object_updates; count++)
+        {
+            object_idx = get_ue_golomb_long(gb);
+            h->object[object_idx].object_idx = object_idx;
+            h->object[object_idx].object_valid = !get_bits1(gb);
+            //Existing object that has changes
+            if (h->object[object_idx].object_valid) {
+                if (h->obj_label_present_flag) {
+                    int label_update_flag = get_bits1(gb);
+                    if (label_update_flag)
+                        h->object[object_idx].label_idx = get_ue_golomb_long(gb);
+                }
+                bb_update_flag = get_bits1(gb);
+                if (bb_update_flag) {
+                    h->object[object_idx].bounding_box_valid = !get_bits1(gb);
+                    if (h->object[object_idx].bounding_box_valid) {
+                        h->object[object_idx].bounding_box_top = get_bits(gb, 16);
+                        h->object[object_idx].bounding_box_left = get_bits(gb, 16);
+                        h->object[object_idx].bounding_box_width = get_bits(gb, 16);
+                        h->object[object_idx].bounding_box_height = get_bits(gb, 16);
+                        if (h->partial_obj_flag_present_flag)
+                            h->object[object_idx].partial_obj_flag = get_bits1(gb);
+                        if (h->obj_conf_info_present_flag)
+                            h->object[object_idx].obj_confidence = get_bits(gb, h->obj_conf_length);
+                    }
+                    //Object is persisting, but BB positions are no longer valid
+                    else {
+                        h->object[object_idx].bounding_box_top = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                        h->object[object_idx].bounding_box_left = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                        h->object[object_idx].bounding_box_width = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                        h->object[object_idx].bounding_box_height = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                    }
+                }
+            }
+            //Existing object that needs to be erased
+            else {
+                h->object[object_idx].object_idx = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                h->object[object_idx].object_valid = 0;
+                h->object[object_idx].label_idx = -ANNOTATED_REGIONS_MAX_NUM_OBJS;
+                h->object[object_idx].bounding_box_valid = 0;
+            }
+        }
+    }
+    return 0;
+}
+#endif
+
 static int decode_film_grain_characteristics(H2645SEIFilmGrainCharacteristics *h,
                                              enum AVCodecID codec_id, GetBitContext *gb)
 {
@@ -485,6 +602,10 @@ int ff_h2645_sei_message_decode(H2645SEI *h, enum SEIType type,
                                                      gbyte);
     case SEI_TYPE_CONTENT_LIGHT_LEVEL_INFO:
         return decode_nal_sei_content_light_info(&h->content_light, gbyte);
+#if ANNOTATED_REGIONS_SEI
+    case SEI_TYPE_ANNOTATED_REGIONS:
+        return decode_annotated_regions(&h->annotated_regions, gb);
+#endif        
     default:
         return FF_H2645_SEI_MESSAGE_UNHANDLED;
     }
@@ -880,4 +1001,5 @@ void ff_h2645_sei_reset(H2645SEI *s)
     s->mastering_display.present = 0;
     s->content_light.present = 0;
     s->aom_film_grain.enable = 0;
+    initialize_annotated_regions(&s->annotated_regions);
 }
diff --git a/libavcodec/h2645_sei.h b/libavcodec/h2645_sei.h
index 488dbcad7e..63e3300706 100644
--- a/libavcodec/h2645_sei.h
+++ b/libavcodec/h2645_sei.h
@@ -33,6 +33,8 @@
 #include "h2645_vui.h"
 #include "sei.h"
 
+#define ANNOTATED_REGIONS_SEI 1
+
 typedef struct H2645SEIA53Caption {
     AVBufferRef *buf_ref;
 } H2645SEIA53Caption;
@@ -107,6 +109,50 @@ typedef struct H2645SEIFilmGrainCharacteristics {
     int persistence_flag;        //< HEVC  only
 } H2645SEIFilmGrainCharacteristics;
 
+#if ANNOTATED_REGIONS_SEI
+typedef struct H2645SEIAnnotatedRegionLabel {
+    int label_idx;
+    int label_valid;
+    int8_t label[256];
+} H2645SEIAnnotatedRegionLabel;
+
+typedef struct H2645SEIAnnotatedRegionObject {
+    int object_idx;
+    int object_valid;
+    int label_idx;
+    int bounding_box_valid;
+    int bounding_box_top;
+    int bounding_box_left;
+    int bounding_box_width;
+    int bounding_box_height;
+    int partial_obj_flag;
+    int obj_confidence;
+} H2645SEIAnnotatedRegionObject;
+
+typedef struct H2645SEIAnnotatedRegions {
+    int present;
+    int received_settings_once;
+    int annotated_reg_cancel_flag;
+    int not_optimized_for_viewing_flag;
+    int true_motion_flag;
+    int occluded_obj_flag;
+    int partial_obj_flag_present_flag;
+    int obj_label_present_flag;
+    int obj_conf_info_present_flag;
+    int obj_conf_length;
+    int obj_label_lang_present_flag;
+    int num_label_updates;
+    int num_object_updates;
+    int num_bbox;
+    int num_labels;    
+#define ANNOTATED_REGIONS_LABEL_MAX_SIZE 256    
+    char obj_label_lang[ANNOTATED_REGIONS_LABEL_MAX_SIZE];
+#define ANNOTATED_REGIONS_MAX_NUM_OBJS 256
+    H2645SEIAnnotatedRegionLabel label[ANNOTATED_REGIONS_MAX_NUM_OBJS];
+    H2645SEIAnnotatedRegionObject object[ANNOTATED_REGIONS_MAX_NUM_OBJS];
+} H2645SEIAnnotatedRegions;
+#endif
+
 typedef struct H2645SEIMasteringDisplay {
     int present;
     uint16_t display_primaries[3][2];
@@ -134,6 +180,9 @@ typedef struct H2645SEI {
     H2645SEIAmbientViewingEnvironment ambient_viewing_environment;
     H2645SEIMasteringDisplay mastering_display;
     H2645SEIContentLight content_light;
+#if ANNOTATED_REGIONS_SEI
+    H2645SEIAnnotatedRegions annotated_regions;
+#endif    
     AVFilmGrainAFGS1Params aom_film_grain;
 } H2645SEI;
 
diff --git a/libavcodec/hevc/hevcdec.c b/libavcodec/hevc/hevcdec.c
index 193d624fc9..9ce46ca7b6 100644
--- a/libavcodec/hevc/hevcdec.c
+++ b/libavcodec/hevc/hevcdec.c
@@ -35,6 +35,7 @@
 #include "libavutil/opt.h"
 #include "libavutil/pixdesc.h"
 #include "libavutil/timecode.h"
+#include "libavutil/detection_bbox.h"
 
 #include "aom_film_grain.h"
 #include "bswapdsp.h"
@@ -2817,7 +2818,9 @@ static int decode_slice_data(HEVCContext *s, const H2645NAL *nal, GetBitContext
 static int set_side_data(HEVCContext *s)
 {
     AVFrame *out = s->cur_frame->f;
-    int ret;
+    AVDetectionBBoxHeader *header;
+    AVDetectionBBox *bbox;    
+    int ret, count, ind;
 
     // Decrement the mastering display and content light level flag when IRAP
     // frame has no_rasl_output_flag=1 so the side data persists for the entire
@@ -2837,6 +2840,35 @@ static int set_side_data(HEVCContext *s)
     if (ret < 0)
         return ret;
 
+    if (s->sei.common.annotated_regions.present) {
+        H2645SEIAnnotatedRegions *ar = &s->sei.common.annotated_regions;
+        //Count the number of valid objects
+        ar->num_bbox = 0;
+        for (ind = 0; ind < ANNOTATED_REGIONS_MAX_NUM_OBJS; ind++) {
+            if (ar->object[ind].object_valid == 1)
+                ar->num_bbox += 1;
+        }
+        header = av_detection_bbox_create_side_data(out, ar->num_bbox);
+        if (!header) {
+            av_log(s->avctx, AV_LOG_ERROR, "failed to create side data with %d bounding boxes\n", ar->num_bbox);
+            return -1;
+        }
+        count = ar->num_bbox;
+        for (ind = 0; ind < ANNOTATED_REGIONS_MAX_NUM_OBJS; ind++) {
+            if (ar->object[ind].object_valid) {
+                bbox = av_get_detection_bbox(header, header->nb_bboxes - count);
+                bbox->w = ar->object[ind].bounding_box_width;
+                bbox->h = ar->object[ind].bounding_box_height;
+                bbox->x = (ar->object[ind].bounding_box_left);
+                bbox->y = (ar->object[ind].bounding_box_top);                    
+                if (ar->obj_label_present_flag) {
+                    memcpy(&bbox->classify_labels[0], &ar->label[ar->object[ind].label_idx].label, ANNOTATED_REGIONS_LABEL_MAX_SIZE);
+                }
+                count --;
+            }
+        }
+    }        
+
     if (s->sei.timecode.present) {
         uint32_t *tc_sd;
         char tcbuf[AV_TIMECODE_STR_SIZE];
